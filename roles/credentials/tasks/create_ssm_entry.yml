---
- name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) Debug our credentials
  debug:
    msg: "credentials {{ credentials }}"
    verbosity: 1

- block:
    - name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) ensure our key exists, if not we create it
      set_fact:
        create_key: "{{ lookup('aws_ssm', key_name ) }}"
      no_log: true

    - name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) Create or update secure key/value pair with default kms key (aws/ssm)
      aws_ssm_parameter_store:
        name: "{{ key_name }}"
        description: "{{ description|default('') }}"
        string_type: "{{ key_type }}"
        value: "{{ password_value }}"
      no_log: true
      when: credentials.overwrite|default(False) or create_key|default('') == ''

  when:
    - not credentials.is_delegated|default(False)

- block:
    - name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) Assume our child role
      sts_assume_role:
        role_arn: "arn:aws:iam::{{ credentials.account_id }}:role/{{ credentials.role_name }}"
        role_session_name: "{{ 9999999999999999999999 | random | to_uuid }}"
      register: assumed_role
      no_log: true
    
    - name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) ensure our key exists, if not we create it
      raw: "AWS_REGION={{ ansible_env.AWS_REGION|default('eu-west-2') }} AWS_SESSION_TOKEN='{{ assumed_role.sts_creds.session_token }}' AWS_ACCESS_KEY_ID='{{ assumed_role.sts_creds.access_key }}' AWS_SECRET_ACCESS_KEY='{{ assumed_role.sts_creds.secret_key }}' aws ssm get-parameter --name '{{ key_name }}'"
      register: create_key
      ignore_errors: true
      no_log: True

    - name: (main/_products/_namespaces/_roles/create|string|password|ssh|_entry/create_ssm_entry) Create or update secure key/value pair with default kms key (aws/ssm)
      aws_ssm_parameter_store:
        aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
        aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
        security_token: "{{ assumed_role.sts_creds.session_token }}"
        name: "{{ key_name }}"
        description: "{{ description|default('') }}"
        string_type: "{{ key_type }}"
        value: "{{ password_value }}"
      when: credentials.overwrite|default(False) or create_key.stdout == ''
      no_log: true

  when:
    - credentials.is_delegated|default(False)
    - credentials.account_id|default(False)
    - credentials.role_name|default(False)
